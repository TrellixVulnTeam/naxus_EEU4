{"ast":null,"code":"var _jsxFileName = \"C:\\\\naxusTicaret\\\\naxus\\\\src\\\\Categories\\\\Products\\\\CartContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext } from \"react\";\nimport { useReducer } from \"react\";\nimport { CartReducer } from \"./CartReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartContextProvider = props => {\n  _s();\n\n  const [cart, dispatch] = useReducer(CartReducer, {\n    shoppingCart: [],\n    totalPrice: 0,\n    totalQty: 0\n  });\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: { ...cart,\n      dispatch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}; //Dispatch, gelen action'ı store'da mevcut state ile birlikte\n//reducer'a parametre geçer. Bu işlem sonucunda state'in ilgili\n//kısımları değişir ve yeni bir state oluşur.\n\n/*Reducer: State ve action'ı parametre alan ve yeni state'i dönen pure bir fonksiyondur.\r\n Action'ın type'ına göre state'i değiştirir ve yeni state'i geri döner. Mutlaka state'in\r\n güncel bir kopyası geri dönmesi gerekiyor. Aksi halde, componentler kendini render etmez.*/\n\n_s(CartContextProvider, \"fEvYA3IVdL8Y9OhoPFUnjwaZGyc=\");\n\n_c = CartContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["C:/naxusTicaret/naxus/src/Categories/Products/CartContext.jsx"],"names":["React","createContext","useReducer","CartReducer","CartContext","CartContextProvider","props","cart","dispatch","shoppingCart","totalPrice","totalQty","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,eAA5B;;AACA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,EAAjC;AAEP,OAAO,MAAMI,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAM,CAACC,IAAD,EAAOC,QAAP,IAAmBN,UAAU,CAACC,WAAD,EAAc;AAACM,IAAAA,YAAY,EAAE,EAAf;AAAmBC,IAAAA,UAAU,EAAE,CAA/B;AAAiCC,IAAAA,QAAQ,EAAE;AAA3C,GAAd,CAAnC;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE,EAAE,GAAGJ,IAAL;AAAWC,MAAAA;AAAX,KAA7B;AAAA,cACGF,KAAK,CAACM;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CARM,C,CAUP;AACA;AACA;;AAEA;AACA;AACA;;GAhBaP,mB;;KAAAA,mB","sourcesContent":["import React, { createContext } from \"react\";\r\nimport { useReducer } from \"react\";\r\nimport { CartReducer } from \"./CartReducer\";\r\nexport const CartContext = createContext();\r\n\r\nexport const CartContextProvider = (props) => {\r\n  const [cart, dispatch] = useReducer(CartReducer, {shoppingCart: [], totalPrice: 0,totalQty: 0, });\r\n\r\n  return (\r\n    <CartContext.Provider value={{ ...cart, dispatch }}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n//Dispatch, gelen action'ı store'da mevcut state ile birlikte\r\n//reducer'a parametre geçer. Bu işlem sonucunda state'in ilgili\r\n//kısımları değişir ve yeni bir state oluşur.\r\n\r\n/*Reducer: State ve action'ı parametre alan ve yeni state'i dönen pure bir fonksiyondur.\r\n Action'ın type'ına göre state'i değiştirir ve yeni state'i geri döner. Mutlaka state'in\r\n güncel bir kopyası geri dönmesi gerekiyor. Aksi halde, componentler kendini render etmez.*/\r\n"]},"metadata":{},"sourceType":"module"}