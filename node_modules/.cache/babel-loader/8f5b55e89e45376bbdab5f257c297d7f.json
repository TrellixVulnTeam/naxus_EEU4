{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntoast.configure();\nexport const CartReducer = (state, action) => {\n  const {\n    shoppingCart,\n    totalPrice,\n    totalQty\n  } = state;\n  let product;\n  let index;\n  let updatedPrice;\n  let updatedQty;\n\n  switch (action.type) {\n    case \"ADD_TO_CART\":\n      const check = shoppingCart.find(product => product.ProductID === action.id);\n\n      if (check) {\n        toast.info(\"Bu 端r端n zaten sepetinizde mevcut\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          progress: undefined\n        });\n        return state;\n      } else {\n        product = action.product;\n        product[\"qty\"] = 1;\n        product[\"TotalProductPrice\"] = product.ProductPrice * product.qty;\n        updatedQty = totalQty + 1;\n        updatedPrice = totalPrice + product.ProductPrice;\n        return {\n          shoppingCart: [product, ...shoppingCart],\n          totalPrice: updatedPrice,\n          totalQty: updatedQty\n        };\n      }\n\n      break;\n\n    case 'INC':\n      product = action.cart;\n      product.qty = ++product.qty;\n      product.TotalProductPrice = product.qty * product.ProductPrice;\n      updatedQty = totalQty + 1;\n      updatedPrice = totalPrice + product.ProductPrice;\n      index = shoppingCart.findIndex(cart => cart.ProductID === action.id);\n      shoppingCart[index] = product;\n      return {\n        shoppingCart: [...shoppingCart],\n        totalPrice: updatedPrice,\n        totalQty: updatedQty\n      };\n      break;\n\n    case 'DEC':\n      product = action.cart;\n\n      if (product.qty > 1) {\n        product.qty = product.qty - 1;\n        product.TotalProductPrice = product.qty * product.ProductPrice;\n        updatedPrice = totalPrice - product.ProductPrice;\n        updatedQty = totalQty - 1;\n        index = shoppingCart.findIndex(cart => cart.ProductID === action.id);\n        shoppingCart[index] = product;\n        return {\n          shoppingCart: [...shoppingCart],\n          totalPrice: updatedPrice,\n          totalQty: updatedQty\n        };\n      } else {\n        return state;\n      }\n\n      break;\n\n    case 'DELETE':\n      const filtered = shoppingCart.filter(product => product.ProductID !== action.id);\n      product = action.cart;\n      updatedQty = totalQty - product.qty;\n      updatedPrice = totalPrice - product.qty * product.ProductPrice;\n      return {\n        shoppingCart: [...filtered],\n        totalPrice: updatedPrice,\n        totalQty: updatedQty\n      };\n      break;\n\n    case 'EMPTY':\n      return {\n        shoppingCart: [],\n        totalPrice: 0,\n        totalQty: 0\n      };\n\n    default:\n      return state;\n  }\n};\n_c = CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["C:/naxusTicaret/naxus/src/Categories/Products/CartReducer.jsx"],"names":["toast","configure","CartReducer","state","action","shoppingCart","totalPrice","totalQty","product","index","updatedPrice","updatedQty","type","check","find","ProductID","id","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ProductPrice","qty","cart","TotalProductPrice","findIndex","filtered","filter"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\ntoast.configure();\r\n\r\nexport const CartReducer = (state, action) => {\r\n  const { shoppingCart, totalPrice, totalQty } = state;\r\n\r\n  let product;\r\n  let index;\r\n  let updatedPrice;\r\n  let updatedQty;\r\n\r\n  switch (action.type) {\r\n    case \"ADD_TO_CART\":\r\n      const check = shoppingCart.find( (product) => product.ProductID === action.id);\r\n      if (check) {\r\n        toast.info(\"Bu 端r端n zaten sepetinizde mevcut\", {\r\n          position: \"top-right\",\r\n          autoClose: 2000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: false,\r\n          draggable: false,\r\n          progress: undefined,\r\n        });\r\n        return state;\r\n      } else {\r\n        product = action.product;\r\n        product[\"qty\"] = 1;\r\n        product[\"TotalProductPrice\"] = product.ProductPrice * product.qty;\r\n        updatedQty = totalQty + 1;\r\n        updatedPrice = totalPrice + product.ProductPrice;\r\n\r\n        return {\r\n          shoppingCart: [product, ...shoppingCart],\r\n          totalPrice: updatedPrice,\r\n          totalQty: updatedQty,\r\n        };\r\n      }\r\n      break;\r\n\r\n      case 'INC':\r\n        product = action.cart;\r\n        product.qty = ++product.qty;\r\n        product.TotalProductPrice = product.qty * product.ProductPrice;\r\n        updatedQty = totalQty + 1;\r\n        updatedPrice = totalPrice + product.ProductPrice;\r\n        index = shoppingCart.findIndex(cart => cart.ProductID === action.id);\r\n        shoppingCart[index] = product;\r\n        return {\r\n            shoppingCart: [...shoppingCart], totalPrice: updatedPrice, totalQty: updatedQty\r\n        }\r\n        break;\r\n        \r\n        case 'DEC':\r\n            product = action.cart;\r\n            if (product.qty > 1) {\r\n                product.qty = product.qty - 1;\r\n                product.TotalProductPrice = product.qty * product.ProductPrice;\r\n                updatedPrice = totalPrice - product.ProductPrice;\r\n                updatedQty = totalQty - 1;\r\n                index = shoppingCart.findIndex(cart => cart.ProductID === action.id);\r\n                shoppingCart[index] = product;\r\n                return {\r\n                    shoppingCart: [...shoppingCart], totalPrice: updatedPrice, totalQty: updatedQty\r\n                }\r\n            }\r\n            else {\r\n                return state;\r\n            }\r\n            break;\r\n\r\n            case 'DELETE':\r\n              const filtered = shoppingCart.filter(product => product.ProductID !== action.id);\r\n              product = action.cart;\r\n              updatedQty = totalQty - product.qty;\r\n              updatedPrice = totalPrice - product.qty * product.ProductPrice;\r\n              return {\r\n                  shoppingCart: [...filtered], totalPrice: updatedPrice, totalQty: updatedQty\r\n              }\r\n              break;\r\n  \r\n          case 'EMPTY':\r\n              return {\r\n                  shoppingCart: [], totalPrice: 0, totalQty: 0\r\n              }\r\n  \r\n          default:\r\n              return state;\r\n  \r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}